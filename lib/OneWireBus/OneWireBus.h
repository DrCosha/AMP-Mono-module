// ---------------------------------------------------
//
//                      One Wire BUS
//            One Wire BUS without master device  
//                  (c) Dr.Cosha, 2023
//                     version 2.1.0
//
// ---------------------------------------------------
//
// Библиотека шины с раноправными участниками - без выделения MASTER устройства.
// По части аппартного обеспечения - идентична стандартной шине OneWire, по программной 
// части полностью свой протокол.
//
// Передает и принимает пакет данных в асинхронном режиме. После заполнения буфера приема ожидает чтения 
// этого буфера основной программой, только после этого разрешается прием следующего пакета. 
// Размер отправляемого пакета от 1 до 254 байт.  Проверка контрольной суммы в пакете не производится. 
// Пакет данных может быть послан любому слушателю адресно - диапазон адресов 0-14, или бродкастом - всем (0b1111) 
// Каждый передаваемый байт контролируется битом чётности.
//
//    Шина должна быть проинициализирована вызовом:
//
//         OneWireBus.InitializeBus(<pin_шины>, <self_addr>, <скорость обмена>, <размер_пакета_для_приема>, <размер_пакета_для_передачи);  
//
//    Передача пакета:
//
//         OneWireBus.SendData(<to_addr>, <передаваемые_данные>, <размер_для_передачи >);   
//                    
//    Прием пакета:
//                // проверяем есть ли данные на входе:
//                if (OneWireBus.HasData()) { < to do thometing > }
//
//
//                // получаем данные в переменную
//                if (OneWireBus.GetRecievedData(<переменная>,sizeof(<переменная>))) {        после прочтения буфер сбрасывается и готов к приему следующего пакета
//                    < to do thometing >
//                }                                                                                               
//
//      Проверка шины OneWire BUS на занятость 
//
//                bool ReadyToSend();                                                         функция вернет true если шина готова к передаче
//                bool HasData();                                                             функция вернет true если в буфере есть принятые данные
//                uint16_t GetDropPktCount();                                                 функция вернет количество потерянных пакетов с момента своего последнего вызова
//
//
// ---------------------------------------------------------------
//
// ver 2.0.0 - работает вся базовая функциональность
//
// ver 2.1.0 - изменена семантика названий функции CurrentMode() -> GetCurrentMode()
//
//


#include <Arduino.h>


#ifndef ONEWIREBUS_H_INCLUDE
#define ONEWIREBUS_H_INCLUDE

// секция объявления для библиотеки

#define OWB_NO_PIN        -1                                            // признак отсутствия назначенного PIN-а на шину
#define BROADCAST_ADDR    0b1111                                        // реальные адреса от 0..14 если адрес 15 (0b1111), то это броадкаст
#define PACKET_OVERHEAD   6                                             // размер дополнительных данных необходимых для построения финального пакета передачи, плюсом к собственно размеру данных (3 байта в заголовке и 2 CRC сумма пакета + 1 завершение посылки)

// указание скорости работы шины как базового цикла задержки для передачи одного бита
#define OWB_MAX_SPEED     32
#define OWB_DEFAULT_SPEED 128
#define OWB_MIN_SPEED     10240


// перечисляем режимы, в которых может находится шина OneWireBUS
typedef enum {  owbm_NotInitialize = 0,                                 // объект еще не инициализирован
                owbm_Listen,                                            // слушаем шину
                owbm_StartRecievePacket,                                // начало приема пакета данных
                owbm_RecievePacket,                                     // идет приема пакета
                owbm_StartSendPacket,                                   // начало передачи пакета данных
                owbm_SendPacket,                                        // передаем пакет данных
                owbm_SendComplete,                                      // закончена передача пакета - переход в прослушку шины
                owbm_PacketRecieved } OWB_Mode_t ;                      // пакет получен по шине и готов для чтения внутри устройства

// фазы обработки полученного пакета в режиме PacketRecieved
// обработка разбита на фазы для уменьшения времени нахождения в прерывании по таймеру
typedef enum {  aph_Nop = 0,                                            // фаза в которой ничего не делаем
                aph_CheckCRC,                                           // фаза проверки CRC пакета
                aph_CheckAddress,                                       // фаза проверки адреса получателя пакета                
                aph_Copy2PktBuf,                                        // фаза копирования полученного пакета в 
                aph_Switch2Listen } APH_Mode_t;                         // окончание обработки и переключение шины в режим прослушки 
        
// объявление глобальных переменных и флагов
extern portMUX_TYPE OWB_Mux;                                            // мьютекс для входа в критическую секцию обработчиков прерывания OWB


// объявление процедур - обработчиков прерываний таймера и GPIO
void IRAM_ATTR onOWB_Timer();                                           // объявление обработчика для таймера OneWireBUS 

// объявление процедур - обработчиков прерываний таймера и GPIO
void IRAM_ATTR onOWB_Pin();                                             // объявление обработчика для пина ввода/вывода шины


// описание класса OneWireBusClass
class OneWireBusClass {   
// класс OneWireBusClass в котором инкапсулируем переменные и методы работы с шиной 

public:
 
  OneWireBusClass();                                                    // конструктор создания объекта по умолчанию шина не назначена, и адрес устройства не задан
                                                                        // поэтому по умолчанию работаем бродкастом

  ~OneWireBusClass();                                                   // деструктор объекта 
  
  bool InitializeBus( int8_t    t_PIN,                                  // инициализация шины OneWire на нужный pin ввода/вывода
                      uint8_t   t_addr,                                 // собственный адрес устройства
                      uint32_t  t_bus_speed,                            // установка скорости передачи
                      uint8_t   t_buf_len );                            // размер буфера для приема/передачи
            
  bool HasData();                                                       // функция возвращает true если в буфере есть полученные данные

  bool SendData(uint8_t _to_addr, uint8_t *data, uint8_t len = 0);      // функция асинхронного запуска передачи данных  (кому, что, сколько)

  bool GetData(uint8_t *data, uint8_t maxlen);                          // функция чтения полученных данных
  void ISRTimerFire();                                                  // функция обработчик прерывания таймера
  void ISRPinFire();                                                    // функция обработчик прерывания по GPIO
  bool ReadyToSend();                                                   // возвращаем true, если шина готова к передаче

  void SetRecievePolitic(bool t_rcv_all, bool t_overwrite_pkt);         // задание политики работы шины - принимать все сообщения/только свои, перезаписывать сообщения новыми/хранить до чтения
  uint16_t GetDropPktCount();                                           // вернуть количество потерянных пакетов с момента начала работы/последнего обращения к функции

  OWB_Mode_t GetCurrentMode();                                          // текущий режим работы шины
 
private:

  // приватные процедуры и функции
  uint16_t GetCrc16Simple( uint8_t * data, uint16_t len );              // процедура упрощенного расчета CRC16 для блока данных

  // приватные переменные
  int8_t      _bus_pin    		= OWB_NO_PIN;                           // значение пина, которому назначениа шина 1Wire  
  uint32_t    _bus_speed  		= OWB_DEFAULT_SPEED;                    // значение скорости шины по умолчанию
  
  bool 		in_buff_full        = false;                                // флаг заполненности буфера передачи
  bool 		recieve_all         = true;                                 // принимать все пакеты, а не только адресованные этому устройству
  bool 		overwrite_packet    = true;                                 // перезаписывать принятые пакеты данных, иначе сбрасывать принятые пакеты до вычитки буфера

  uint16_t 	_drop_pkt_count  	= 0;                                    // счётчик потерянных пакетов - это пакеты, которые приняты но не сохранены, либо перезаписаны 

  uint8_t 	_self_addr;                                                 // собственный адрес устройства

  uint8_t 	*buffer           	= NULL;                                 // операционный буффер для принимаемых/передаваемых данных
  uint8_t 	*packet_buffer    	= NULL;                                 // выходной буффер хранения принятых данных
  uint16_t 	buffer_len;                                                 // размер операционного буффера
  uint16_t 	packet_buf_len;                                             // размер выходного буффера

  uint8_t 	_bitCounter       	= 0;                                    // счётчик бит для пакета передачи	
	uint8_t _byteCounter      	= 0;                                    // счётчик байт для пакета передачи
  uint8_t 	_CurPacketSize    	= 0;                                    // счётчик байт в текущем пакете для передачи
  uint8_t 	_inp_from_addr    	= 0;                                    // адрес отправителя входящего пакета данных
  uint8_t 	_inp_to_addr      	= 0;                                    // адрес получателя входящего пакета данных

  OWB_Mode_t      _mode     	= owbm_NotInitialize;                   // режим текущей работы шины
  APH_Mode_t      _phase    	= aph_Nop;                              // текущая фаза обработки пакета
  
};


extern OneWireBusClass OneWireBus;                                      // сразу создаем объект - 1Wire шину для устройства


#endif
